# =============================================================================
# WORKFLOW GITHUB ACTIONS - CI/CD FRONTEND ANGULAR
# Déploiement automatique sur AWS S3 + CloudFront avec Terraform
# =============================================================================

name: Deploy Frontend to AWS

# Déclencheurs du workflow
on:
  push:
    branches: [ main ]
  workflow_dispatch: # Permet l'exécution manuelle

# Variables d'environnement globales
env:
  NODE_VERSION: '20'
  TERRAFORM_VERSION: '1.12.1'
  AWS_REGION: 'eu-west-3'
  WORKING_DIRECTORY: './terraform/frontend'

# Définition des jobs
jobs:
  # =============================================================================
  # JOB 1: BUILD DE L'APPLICATION ANGULAR
  # =============================================================================
  build:
    name: Build Angular Application
    runs-on: ubuntu-latest
    
    steps:
      # Checkout du code source
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Configuration de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Installation des dépendances
      - name: Install Dependencies
        run: npm ci

      # Build de l'application Angular en mode production
      - name: Build Angular Application
        run: npm run build

      # Upload des artefacts de build
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: angular-build
          path: dist/vibe-ticket-frontend/
          retention-days: 1

  # =============================================================================
  # JOB 2: DÉPLOIEMENT DE L'INFRASTRUCTURE TERRAFORM
  # =============================================================================
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    
    # Permissions pour l'écriture dans le repository (pour l'état Terraform)
    permissions:
      contents: write
      
    outputs:
      bucket-name: ${{ steps.terraform-output.outputs.bucket-name }}
      cloudfront-distribution-id: ${{ steps.terraform-output.outputs.cloudfront-distribution-id }}
    
    steps:
      # Checkout du code source
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Debug des secrets (sans afficher les valeurs)
      - name: Debug Secrets
        run: |
          echo "Vérification des secrets AWS..."
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID est vide ou manquant"
            exit 1
          else
            echo "✅ AWS_ACCESS_KEY_ID est configuré"
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY est vide ou manquant"
            exit 1
          else
            echo "✅ AWS_SECRET_ACCESS_KEY est configuré"
          fi

      # Configuration d'AWS CLI
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Test de connexion AWS
      - name: Test AWS Connection
        run: |
          echo "Test de connexion AWS..."
          aws sts get-caller-identity

      # Installation de Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      # Initialisation de Terraform
      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform init

      # Validation de la configuration Terraform
      - name: ✅ Terraform Validate
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform validate

      # Plan Terraform (pour information)
      - name: Terraform Plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform plan -no-color

      # Application de Terraform
      - name: Terraform Apply
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: terraform apply -auto-approve -no-color

      # Récupération des outputs Terraform
      - name: Get Terraform Outputs
        id: terraform-output
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo "bucket-name=$(terraform output -raw bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront-distribution-id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      # Commit de l'état Terraform mis à jour
      - name: Commit Terraform State
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Vérifier s'il y a des changements dans les fichiers d'état
          if [ -f "terraform/frontend/terraform.tfstate" ]; then
            git add terraform/frontend/terraform.tfstate
          fi
          if [ -f "terraform/frontend/terraform.tfstate.backup" ]; then
            git add terraform/frontend/terraform.tfstate.backup
          fi
          
          # Commit seulement s'il y a des changements
          if git diff --staged --quiet; then
            echo "Aucun changement d'état Terraform à committer"
          else
            git commit -m "🤖 Update Terraform state after deployment [skip ci]"
            git push
          fi

  # =============================================================================
  # JOB 3: DÉPLOIEMENT DE L'APPLICATION SUR S3
  # =============================================================================
  deploy-application:
    name: Deploy Application to S3
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]

    outputs:
      application-url: ${{ steps.final-urls.outputs.cloudfront-url }}
      s3-url: ${{ steps.final-urls.outputs.s3-url }}
    
    steps:
      # Checkout du code source
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Configuration d'AWS CLI
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Téléchargement des artefacts de build
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: angular-build
          path: dist/vibe-ticket-frontend/

      # Synchronisation avec S3
      - name: Sync to S3
        run: |
          aws s3 sync dist/vibe-ticket-frontend/ s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"
          
          # Upload des fichiers HTML avec un cache plus court
          aws s3 sync dist/vibe-ticket-frontend/ s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/ \
            --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "*.json"

      # Invalidation du cache CloudFront
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.deploy-infrastructure.outputs.cloudfront-distribution-id }} \
            --paths "/*"

      # Récupération et affichage final des URLs
      - name: Final Deployment URLs
        id: final-urls
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Installation de Terraform pour récupérer les outputs
          curl -fsSL https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip -o terraform.zip
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/

          # Initialisation et récupération des outputs
          terraform init
          CLOUDFRONT_URL=$(terraform output -raw cloudfront_url_http)
          S3_URL="http://${{ needs.deploy-infrastructure.outputs.bucket-name }}.s3-website.${{ env.AWS_REGION }}.amazonaws.com"

          # Définir les outputs pour GitHub Actions
          echo "cloudfront-url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT
          echo "s3-url=$S3_URL" >> $GITHUB_OUTPUT

          echo ""
          echo "=========================================="
          echo "✅ DÉPLOIEMENT TERMINÉ AVEC SUCCÈS !"
          echo "=========================================="
          echo ""
          echo "VOTRE APPLICATION EST ACCESSIBLE SUR :"
          echo ""
          echo "URL PRINCIPALE (CloudFront) :"
          echo "   $CLOUDFRONT_URL"
          echo ""
          echo "URL ALTERNATIVE (S3 Direct) :"
          echo "   $S3_URL"
          echo ""
          echo "=========================================="
          echo "✅ Vibe-ticket est maintenant en ligne !"
          echo "=========================================="

  # =============================================================================
  # JOB 4: NOTIFICATION FINALE DE SUCCÈS
  # =============================================================================
  notify-success:
    name: Deployment Success Notification
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure, deploy-application]
    if: success()

    steps:
      - name: Success Summary
        run: |
          echo ""
          echo "=================================================="
          echo "                                                  "
          echo "        DÉPLOIEMENT RÉUSSI !                     "
          echo "                                                  "
          echo "   Vibe-ticket Frontend est maintenant           "
          echo "   déployé et accessible !                       "
          echo "                                                  "
          echo "   URL: ${{ needs.deploy-application.outputs.application-url }}"
          echo "                                                  "
          echo "=================================================="
          echo ""
          echo "✅ Tous les jobs ont été exécutés avec succès :"
          echo "   ✅ Build Angular"
          echo "   ✅ Deploy Infrastructure"
          echo "   ✅ Deploy Application"
          echo ""
          echo "Application accessible sur :"
          echo "   ${{ needs.deploy-application.outputs.application-url }}"
